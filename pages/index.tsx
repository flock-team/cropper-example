import { PhotographIcon } from '@heroicons/react/solid';
import Cropper from 'cropperjs';
import 'cropperjs/dist/cropper.css';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Modal from 'react-modal';
import styles from '../styles/Home.module.css';
import { firestore, storage } from '../libs/firebase';
import { ref, uploadString, getDownloadURL } from 'firebase/storage';
import { setDoc, doc, getDoc } from 'firebase/firestore';

const Home: NextPage = () => {
  useEffect(() => {
    const userDoc = doc(firestore, 'users/AAA');

    getDoc(userDoc).then((result) => {
      const userData = result.data();
      const photo = userData?.avatarURL;
      if (photo) {
        setPreview(photo);
      }
    });
  }, []);

  // プレビュー画像を管理
  const [preview, setPreview] = useState<string>();

  // クロッパーを管理
  const [cropper, setCropper] = useState<Cropper | null>();

  // クロップ対象のファイルを管理
  const [targetFile, setTargetFile] = useState<Blob | null>();

  // クロップ対象の画像をセット
  const setImageToCropper = (event: React.ChangeEvent<HTMLInputElement>) => {
    setTargetFile(event?.target.files?.[0] as Blob);
    event.target.value = '';
  };

  // クロッパーの初期化（モーダル起動後に発動）
  const initCropper = () => {
    // イメージタグを捕捉
    const image: HTMLImageElement = document.getElementById(
      'image'
    ) as HTMLImageElement;

    // 選択された画像ファイルを文字列に変換するために必要なリーダー
    const reader = new FileReader();

    // 画像ファイル読み込み時に発動する処理
    reader.onload = (event) => {
      // 文字列として読み込んだ画像をイメージタグにセット
      image.src = event?.target?.result as string;

      // クロッパーの初期化
      const wrapper = new Cropper(image, {
        aspectRatio: 1 / 1,
        cropBoxResizable: false,
        cropBoxMovable: false,
        dragMode: 'move',
        viewMode: 3,
      });

      // クロッパーをステートに保持させる
      setCropper(wrapper);
    };

    // リーダーに画像ファイルを渡す
    reader.readAsDataURL(targetFile as Blob);
  };

  // プレビューされている内容をアップロード
  const uploadAvatar = async () => {
    // 保存先のRefを取得
    const storageRef = ref(storage, 'users/AAA/avatar.jpg');

    // 画像アップロード
    await uploadString(storageRef, preview as string, 'data_url');

    // アップロードした画像を表示するためのURLを取得
    const avatarURL = await getDownloadURL(storageRef);

    // ユーザードキュメントに反映
    const userDoc = doc(firestore, 'users/AAA');

    setDoc(
      userDoc,
      {
        avatarURL,
      },
      {
        merge: true,
      }
    ).then(() => {
      alert('アップロード完了');
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h2 className="font-bold text-2xl my-10">プロフィール編集</h2>

      <h3 className="font-bold text-xl mb-6">アバター</h3>

      <label className="inline-block mb-4 cursor-pointer relative">
        {preview ? (
          <img
            className="w-20 h-20 rounded-full overflow-hidden border block"
            src={preview}
            alt=""
          />
        ) : (
          <div className="w-20 h-20 rounded-full overflow-hidden border bg-gray-400"></div>
        )}

        <input className="hidden" type="file" onChange={setImageToCropper} />
        <PhotographIcon className="absolute left-1/2 top-1/2 transform opacity-60 -translate-x-1/2 -translate-y-1/2 w-10 h-10 text-white" />
      </label>

      <Modal
        isOpen={!!targetFile}
        onAfterOpen={initCropper}
        onRequestClose={() => setTargetFile(null)}
        contentLabel="Example Modal"
      >
        <h2 className="font-bold text-2xl mb-6">クロップ</h2>

        <div className="max-w-sm pb-4 border-b mb-4">
          <img id="image" className="block w-full" alt="" />
        </div>

        <button
          className="px-4 py-3 shadow rounded bg-gray-700 text-white"
          onClick={() => {
            // プレビューステートにクロッピング結果を格納
            const croppedImage = cropper
              ?.getCroppedCanvas({
                width: 300, // リサイズ
                height: 300, // リサイズ
              })
              .toDataURL('image/jpeg');

            // プレビューステートにセット
            setPreview(croppedImage);

            // ダイヤログを閉じるためにクロップターゲットを空にする
            setTargetFile(null);
          }}
        >
          クロップする
        </button>
      </Modal>

      <div className="mt-10">
        <button
          className="px-4 py-3 shadow rounded bg-gray-700 text-white"
          onClick={uploadAvatar}
        >
          アップロード
        </button>
      </div>
    </div>
  );
};

export default Home;
